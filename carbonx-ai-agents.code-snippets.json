{
  "CarbonX: Generate User Service (Node.js)": {
    "prefix": "carbonx-user-service",
    "body": [
      "You are a senior backend engineer at a regulated Australian fintech (AFSL holder).",
      "Generate a TypeScript Node.js service for user and organization management.",
      "",
      "STEP 1: Define TypeScript interfaces:",
      "- User: { id: string, email: string, orgId: string, kycStatus: 'pending' | 'approved' | 'rejected', role: 'admin' | 'trader' | 'viewer', createdAt: Date }",
      "- Organization: { id: string, name: string, abn: string, safeguardFacilityId?: string, createdAt: Date }",
      "",
      "STEP 2: Create PostgreSQL schema (TypeORM entities):",
      "- users table: id (PK), email (unique), orgId (FK), kycStatus, role, createdAt",
      "- organizations table: id (PK), name, abn (unique), safeguardFacilityId, createdAt",
      "",
      "STEP 3: Build CRUD endpoints (NestJS controllers):",
      "- POST /users/register → create user + org (if new ABN) → return JWT",
      "- GET /users/me → return user + org data",
      "- PATCH /users/:id → update role/kycStatus (admin only)",
      "- Auth guard: check JWT + RBAC (admin can edit, trader/viewer read-only)",
      "",
      "STEP 4: Add compliance hooks:",
      "- Log all user creation + role changes to ELK audit log",
      "- Encrypt email + ABN at rest (use @nestjs/jwt + bcrypt)",
      "- Never expose raw PII in API responses — mask email (e.g., \"j***@example.com\")",
      "",
      "STEP 5: Write unit tests (Jest):",
      "- Test register → creates user + org",
      "- Test me → returns masked email",
      "- Test update → only admin can change role",
      "- Test guard → 403 if insufficient role",
      "",
      "OUTPUT FORMAT:",
      "- TypeScript files: user.entity.ts, org.entity.ts, user.controller.ts, user.service.ts, user.module.ts",
      "- Test files: user.controller.spec.ts, user.service.spec.ts",
      "- No markdown — raw code only."
    ],
    "description": "Generate compliant user/org management service for CarbonX"
  },

  "CarbonX: Generate KYC Integration (Notabene)": {
    "prefix": "carbonx-kyc-service",
    "body": [
      "You are a compliance engineer at an AUSTRAC-enrolled DCE.",
      "Generate a TypeScript service that integrates Notabene for KYC/AML checks.",
      "",
      "STEP 1: Define interfaces:",
      "- KYCRequest: { userId: string, fullName: string, idDoc: File, proofOfAddress: File }",
      "- KYCResult: { status: 'approved' | 'rejected' | 'manual_review', reason: string, notabeneId: string, completedAt: Date }",
      "",
      "STEP 2: Build Notabene API service:",
      "- POST /kyc/verify → upload docs to Notabene → poll for result (max 5 min) → save to DB",
      "- Use Notabene SDK: @notabene/client",
      "- Handle webhooks: listen for “kyc.completed” → update user.kycStatus",
      "",
      "STEP 3: Add compliance guardrails:",
      "- Log every API call + result to ELK (include userId, notabeneId, status)",
      "- If “manual_review” → send email to compliance@carbonx.au",
      "- Block user from auctions/tokens until kycStatus = “approved”",
      "",
      "STEP 4: Write integration tests:",
      "- Mock Notabene API → test approved/rejected/manual_review paths",
      "- Test webhook handler → updates user status",
      "- Test guard → 403 if kycStatus != “approved”",
      "",
      "OUTPUT FORMAT:",
      "- TypeScript files: kyc.service.ts, kyc.controller.ts, kyc.gateway.ts (Notabene), kyc.entity.ts",
      "- Test files: kyc.service.spec.ts, kyc.gateway.spec.ts",
      "- No markdown — raw code only."
    ],
    "description": "Generate KYC service with Notabene integration and AUSTRAC compliance"
  },

  "CarbonX: Generate Auction Engine (Node.js)": {
    "prefix": "carbonx-auction-engine",
    "body": [
      "You are a trading systems engineer building a carbon auction platform.",
      "Generate a TypeScript service that matches corporate buyers with project sellers.",
      "",
      "STEP 1: Define interfaces:",
      "- Auction: { id: string, buyerId: string, volume: number, maxPrice: number, vintagePref?: number, status: 'open' | 'matched' | 'settled' }",
      "- Bid: { id: string, auctionId: string, sellerId: string, price: number, serialRange: string, vintage: number }",
      "",
      "STEP 2: Build matching engine:",
      "- On new bid → find open auction with matching vintage (or none) → sort by price (lowest first) → match if bid.price <= auction.maxPrice",
      "- On match → emit event: { auctionId, bidId, matchedPrice, serialRange }",
      "- Lock ACCUs: set auction.status = “matched”, bid.status = “matched”",
      "",
      "STEP 3: Add compliance hooks:",
      "- Log every match to ELK (include auctionId, bidId, price, serials)",
      "- Send email to buyer + seller: “Auction #123 matched at $25/ton — please execute ANREU transfer”",
      "- Block settlement until ANREU transfer is confirmed (manual flag in DB)",
      "",
      "STEP 4: Write unit tests:",
      "- Test match → correct price priority",
      "- Test vintage filter → only match if preferred",
      "- Test lock → no double-matching",
      "",
      "OUTPUT FORMAT:",
      "- TypeScript files: auction.entity.ts, bid.entity.ts, matching.service.ts, auction.gateway.ts (email)",
      "- Test files: matching.service.spec.ts",
      "- No markdown — raw code only."
    ],
    "description": "Generate auction matching engine with compliance logging"
  },

  "CarbonX: Generate ANREU PDF Parser (Python)": {
    "prefix": "carbonx-anreu-parser",
    "body": [
      "You are a data engineer parsing Australian government PDFs.",
      "Generate a Python script that extracts ACCU data from ANREU transfer receipts.",
      "",
      "STEP 1: Input: PDF file (sample attached) — contains:",
      "- Transfer Date",
      "- From Account: [Account Name + ID]",
      "- To Account: [Account Name + ID]",
      "- ACCU Serial Range: e.g., “ACCU1000000 to ACCU1000099”",
      "- Vintage: e.g., “2024”",
      "- Project ID: e.g., “CAR-2024-001”",
      "- Facility: e.g., “XYZ Reforestation Project”",
      "",
      "STEP 2: Use PyPDF2 + pdfplumber to extract text → regex to find key fields:",
      "- Serial range: r\"ACCU(\\\\d+) to ACCU(\\\\d+)\"",
      "- Vintage: r\"(\\\\d{4})\" (4-digit year near “Vintage”)",
      "- Project ID: r\"[A-Z]{3}-\\\\d{4}-\\\\d{3}\" (e.g., CAR-2024-001)",
      "",
      "STEP 3: Output: JSON dict:",
      "{",
      "  \"serial_start\": 1000000,",
      "  \"serial_end\": 1000099,",
      "  \"vintage\": 2024,",
      "  \"project_id\": \"CAR-2024-001\",",
      "  \"facility\": \"XYZ Reforestation Project\",",
      "  \"from_account\": \"Seller Pty Ltd (ACC123)\",",
      "  \"to_account\": \"Buyer Pty Ltd (ACC456)\"",
      "}",
      "",
      "STEP 4: Add error handling:",
      "- If < 90% confidence → return { \"error\": \"Low confidence — manual review required\" }",
      "- Log parse result + confidence to ELK",
      "",
      "STEP 5: Write tests:",
      "- Test with 5 sample PDFs → assert JSON output",
      "- Test low confidence → returns error",
      "",
      "OUTPUT FORMAT:",
      "- Python file: anreu_parser.py",
      "- Test file: test_anreu_parser.py",
      "- No markdown — raw code only."
    ],
    "description": "Generate ANREU PDF parser with confidence scoring and audit logs"
  },

  "CarbonX: Generate cACCU ERC-1155 (Solidity)": {
    "prefix": "carbonx-cacu-token",
    "body": [
      "You are a blockchain engineer at an AFSL-regulated token issuer.",
      "Generate a Solidity ERC-1155 contract for cACCU tokens.",
      "",
      "STEP 1: Inherit OpenZeppelin:",
      "- ERC1155, Ownable, Pausable",
      "",
      "STEP 2: Define struct:",
      "- BatchMeta { string projectID, uint256 vintage, string methodology, string geoHash, address custodian, uint256 mintedAt }",
      "",
      "STEP 3: Add state:",
      "- mapping(uint256 => BatchMetadata) public batchInfo;",
      "- mapping(address => bool) public isKYCApproved;",
      "",
      "STEP 4: Functions:",
      "- constructor() → set URI: \"https://carbonx.au/api/metadata/{id}.json\"",
      "- mintBatch(address to, uint256 batchId, uint256 amount, string memory projectID, uint256 vintage, string memory method, string memory geo) → onlyOwner → _mint → emit BatchMinted",
      "- redeem(uint256 batchId, uint256 amount) → require KYC → _burn → emit BatchRedeemed",
      "- setKYC(address user, bool approved) → onlyOwner",
      "- _beforeTokenTransfer → if transfer (not mint/burn) → require both from/to are KYC’d",
      "",
      "STEP 5: Add compliance hooks:",
      "- Revert with “KYC required” if transfer/redeem by non-KYC’d address",
      "- Emit events for all mints + redeems (include batchId, amount, projectID)",
      "",
      "STEP 6: Write tests (Hardhat):",
      "- Test mint → batchInfo set correctly",
      "- Test transfer → reverts if not KYC’d",
      "- Test redeem → burns tokens + emits event",
      "",
      "OUTPUT FORMAT:",
      "- Solidity file: cACCU.sol",
      "- Test file: test/cACCU.test.js",
      "- No markdown — raw code only."
    ],
    "description": "Generate ERC-1155 cACCU token contract with KYC and batch metadata"
  },

  "CarbonX: Compliance Scan (AFSL/AUSTRAC)": {
    "prefix": "carbonx-compliance-scan",
    "body": [
      "You are a compliance officer for an AFSL holder.",
      "Scan the provided code for violations of:",
      "",
      "1. Corporations Act 2001 — financial product disclosure (s1013C)",
      "2. ASIC RG 264 — PDS content requirements",
      "3. AML/CTF Act 2006 — KYC/AML obligations (s36)",
      "4. AUSTRAC — TTRs for transactions >$10,000 AUD",
      "",
      "STEP 1: Look for:",
      "- Any transfer/mint of cACCU without KYC check",
      "- Any fee calculation without disclosure in PDS",
      "- Any auction settlement without ANREU transfer confirmation",
      "- Any transaction >$10,000 AUD without AUSTRAC report trigger",
      "",
      "STEP 2: For each violation:",
      "- Note file + line number",
      "- Describe risk (e.g., “Missing KYC check on transfer — violates AML/CTF Act s36”)",
      "- Suggest fix (e.g., “Add require(isKYCApproved[msg.sender], ‘KYC required’);”)",
      "- Assign severity: High (blocks merge), Medium (warn), Low (info)",
      "",
      "STEP 3: Output format:",
      "| File | Line | Risk Description | Suggested Fix | Severity |",
      "|------|------|------------------|---------------|----------|",
      "",
      "STEP 4: If no violations → output “✅ No compliance risks detected.”",
      "",
      "OUTPUT FORMAT:",
      "- Markdown table (for PR comments)",
      "- No code — just table or “✅ No compliance risks detected.”"
    ],
    "description": "Scan code for AFSL/AUSTRAC compliance risks"
  },

  "CarbonX: Generate User Guide (Auction)": {
    "prefix": "carbonx-user-guide-auction",
    "body": [
      "You are a technical writer for CarbonX — a regulated carbon trading platform.",
      "Generate a user guide section: “How to Create a Compliance Auction”",
      "",
      "STEP 1: Audience: Corporate emitters subject to Safeguard Mechanism.",
      "",
      "STEP 2: Steps:",
      "1. Log in → Click “Create Auction”",
      "2. Enter: Volume (ACCUs needed), Max Price ($/ton), Vintage Preference (optional)",
      "3. Click “Post Auction” → system lists it for sellers",
      "4. When matched → you’ll get email: “Auction #123 matched at $25/ton — please confirm”",
      "5. Click “Confirm” → system locks ACCUs → seller executes ANREU transfer",
      "6. After transfer → download CER surrender form → submit to ANREU",
      "",
      "STEP 3: Add compliance notes:",
      "- “You must hold sufficient ACCUs in your ANREU account to cover the auction.”",
      "- “All auctions are binding — ensure your max price reflects your budget.”",
      "",
      "STEP 4: Tone: Clear, friendly, step-by-step. Use screenshots (insert [IMAGE: auction-form.png] placeholder).",
      "",
      "STEP 5: Output format:",
      "- Markdown (for GitBook/Notion)",
      "- Headers, bullet points, placeholders for images",
      "",
      "OUTPUT FORMAT:",
      "- Markdown only — no HTML, no code."
    ],
    "description": "Generate user guide for auction creation with compliance notes"
  },

  "CarbonX: Provision AWS Infra (Terraform)": {
    "prefix": "carbonx-aws-infra",
    "body": [
      "You are a DevOps engineer at a cost-conscious fintech.",
      "Generate Terraform code to provision AWS infra for CarbonX.",
      "",
      "STEP 1: Resources:",
      "- EKS cluster (3x t3.medium nodes)",
      "- RDS PostgreSQL (db.t3.small, encrypted, daily snapshots)",
      "- ElastiCache Redis (cache.t3.small, persistent)",
      "- S3 bucket for logs + attestations",
      "- CloudWatch alerts (CPU > 80%, disk > 90%)",
      "",
      "STEP 2: Add cost guardrails:",
      "- Set max weekly spend: $1,500 AUD",
      "- Auto-kill idle pods (no CPU > 5% for 1hr)",
      "- Use spot instances for non-prod",
      "",
      "STEP 3: Add compliance:",
      "- Encrypt all data at rest (KMS)",
      "- Enable audit logging (CloudTrail + ELK)",
      "- Restrict SSH to office IP only",
      "",
      "STEP 4: Output:",
      "- main.tf, variables.tf, outputs.tf",
      "- Comment: “# Max weekly cost: $1,500 AUD — enforced by AWS Budgets”",
      "",
      "OUTPUT FORMAT:",
      "- Terraform (.tf) files only — no markdown, no explanations."
    ],
    "description": "Generate Terraform for AWS with cost and compliance guardrails"
  }
}